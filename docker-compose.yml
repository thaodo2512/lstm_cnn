services:
  crypto-train-gpu-l4:
    build:
      context: .
      dockerfile: docker/Dockerfile.gpu.x86
    container_name: crypto_train_gpu_l4
    # Enable all GPUs (requires nvidia-container-toolkit on host)
    gpus: all
    restart: unless-stopped
    shm_size: "2g"  # more shared memory for DataLoader workers
    environment:
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
      TORCH_CUDA_ARCH_LIST: "8.9"   # NVIDIA L4 SM 89
      PYTHONFAULTHANDLER: "1"
      PYTHONUNBUFFERED: "1"
      PYTHONWARNINGS: default
      MPLBACKEND: Agg
      # Configure training via envs (compose can pass overrides)
      EPOCHS: ${EPOCHS:-10}
      HORIZON: ${HORIZON:-1}
      BATCH_SIZE: ${BATCH_SIZE:-32}
      WINDOW_SIZE: ${WINDOW_SIZE:-60}
      STRIDE: ${STRIDE:-1}
      SOURCE: ${SOURCE:-auto}
      CLASSIFICATION: ${CLASSIFICATION:-false}
    volumes:
      - ./:/workspace
      - ./artifacts:/workspace/artifacts
    working_dir: /workspace
    command: [
      "python", "hybrid_lstm_transformer_crypto.py",
      "--epochs", "${EPOCHS:-10}",
      "--horizon", "${HORIZON:-1}",
      "--batch_size", "${BATCH_SIZE:-32}",
      "--window_size", "${WINDOW_SIZE:-60}",
      "--stride", "${STRIDE:-1}",
      "--source", "${SOURCE:-auto}",
      "--out_dir", "artifacts"
    ]

  # FreqAI training service (uses our HybridTimeseriesFreqAIModel via PYTHONPATH)
  freqai-train-gpu-l4:
    image: your-built-image  # replace with the tag produced by `docker compose build`
    build:
      context: .
      dockerfile: docker/Dockerfile.freqtrade.gpu.x86
    container_name: freqai_train_gpu_l4
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    restart: "no"
    shm_size: "2g"
    environment:
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
      TORCH_CUDA_ARCH_LIST: "8.9"
      PYTHONFAULTHANDLER: "1"
      PYTHONUNBUFFERED: "1"
      # Silence noisy ImportWarnings (e.g., SixMetaPathImporter)
      PYTHONWARNINGS: "ignore::ImportWarning"
      MPLBACKEND: Agg
      FREQAI_DEVICE: cuda
      PYTHONPATH: /workspace
      TIMERANGE: ${TIMERANGE:-20240101-20240201}
      # Block download config
      TIMEFRAMES: ${TIMEFRAMES:-1h}
      BLOCKS: ${BLOCKS:-1}
      BLOCK_DAYS: ${BLOCK_DAYS:-30}
    volumes:
      - ./:/workspace
      # Option A: Use local example user_data provided by this repo
      - ./freqtrade_user_data:/freqtrade/user_data
      # Option B: Use your external user_data folder (uncomment and adjust path)
      # - ../user_data:/freqtrade/user_data
      # Optional mounts if you keep additional scripts/tools
      - ../tools:/freqtrade/tools
      - ../scripts:/freqtrade/scripts
    working_dir: /freqtrade
    # Backtesting triggers FreqAI training + inference
    command:
      - bash
      - -lc
      - |-
        set -ex;
        (pip install --no-cache-dir -U six && pip install --no-cache-dir stable-baselines3 sb3-contrib) || true;
        echo "TIMEFRAMES=${TIMEFRAMES:-1h} TIMERANGE=${TIMERANGE:-20240101-20250930} BLOCKS=${BLOCKS:-3} BLOCK_DAYS=${BLOCK_DAYS:-30}";
        echo "Before download - available data:";
        # list-data may not accept --timeframes in this Freqtrade version; show all timeranges
        freqtrade list-data --config /freqtrade/user_data/config.json --show-timerange || true;
        # Ensure backtest-range data exists
        freqtrade download-data --config /freqtrade/user_data/config.json -t "${TIMEFRAMES:-1h}" --timerange "${TIMERANGE:-20240101-20250930}";
        # Ensure pre-start history exists for FreqAI training windows
        bash /workspace/scripts/freqtrade_download_prestart_blocks.sh /freqtrade/user_data/config.json "${TIMEFRAMES:-1h}" "${TIMERANGE:-20240101-20250930}" "${BLOCKS:-3}" "${BLOCK_DAYS:-30}";
        echo "After download - available data:";
        freqtrade list-data --config /freqtrade/user_data/config.json --show-timerange || true;
        mkdir -p /freqtrade/user_data/backtest_results;
        freqtrade backtesting \
          --strategy FreqAIHybridExample \
          --freqaimodel HybridTimeseriesFreqAIModel_tinhn \
          --config /freqtrade/user_data/config.json \
          --timerange "${TIMERANGE:-20240101-20250930}" \
          --cache day \
          --export trades \
          --export-filename /freqtrade/user_data/backtest_results/freqai_trades.json

  # Alternate local run: direct backtesting with explicit strategy (same mounts)
  freqai-backtest-gpu-l4:
    build:
      context: .
      dockerfile: docker/Dockerfile.freqtrade.gpu.x86
    container_name: freqai_backtest_gpu_l4
    gpus: all
    restart: "no"
    shm_size: "2g"
    environment:
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
      PYTHONPATH: /workspace
      FREQAI_DEVICE: cuda
      MPLBACKEND: Agg
      TIMERANGE: ${TIMERANGE:-20240101-20240201}
      # Strategy tuning (ichiV1)
      ICHI_STD_MULT: ${ICHI_STD_MULT:-0.5}
      ICHI_BULLISH_LEVEL: ${ICHI_BULLISH_LEVEL:-2}
      ICHI_CLOUD_LEVEL: ${ICHI_CLOUD_LEVEL:-1}
      ICHI_FAN_SHIFT: ${ICHI_FAN_SHIFT:-1}
      ICHI_FAN_GAIN: ${ICHI_FAN_GAIN:-1.001}
      ICHI_REQUIRE_DOPREDICT: ${ICHI_REQUIRE_DOPREDICT:-true}
      ICHI_USE_HA: ${ICHI_USE_HA:-true}
      ICHI_ENABLE_SHORT: ${ICHI_ENABLE_SHORT:-true}
    volumes:
      - ./:/workspace
      - ./freqtrade_user_data:/freqtrade/user_data
    working_dir: /freqtrade
    command: [
      "freqtrade", "backtesting",
      "--config", "/freqtrade/user_data/config.json",
      "--freqaimodel", "HybridTimeseriesFreqAIModel_tinhn",
      "--strategy", "FreqAIHybridExample",
      "--timerange", "${TIMERANGE:-20240101-20240201}"
    ]

  # Backtest specific pairs via env PAIRS (comma-separated) using a temp config
  freqai-backtest-pairs-gpu-l4:
    build:
      context: .
      dockerfile: docker/Dockerfile.freqtrade.gpu.x86
    container_name: freqai_backtest_pairs_gpu_l4
    gpus: all
    restart: "no"
    shm_size: "2g"
    environment:
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
      PYTHONPATH: /workspace
      FREQAI_DEVICE: cuda
      MPLBACKEND: Agg
      # Inputs
      PAIRS: ${PAIRS:-BTC/USDT:USDT}
      TIMEFRAMES: ${TIMEFRAMES:-1h}
      TIMERANGE: ${TIMERANGE:-20240101-20240201}
      STRATEGY: ${STRATEGY:-FreqAIHybridExample}
      FREQAIMODEL: ${FREQAIMODEL:-HybridTimeseriesFreqAIModel_tinhn}
      EXPORT_TYPE: ${EXPORT_TYPE:-trades}
      BLOCKS: ${BLOCKS:-1}
      BLOCK_DAYS: ${BLOCK_DAYS:-30}
      # Optional Telegram notify
      NOTIFY_TELEGRAM: ${NOTIFY_TELEGRAM:-false}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID:-}
      # Strategy tuning (ichiV1)
      ICHI_STD_MULT: ${ICHI_STD_MULT:-0.5}
      ICHI_BULLISH_LEVEL: ${ICHI_BULLISH_LEVEL:-2}
      ICHI_CLOUD_LEVEL: ${ICHI_CLOUD_LEVEL:-1}
      ICHI_FAN_SHIFT: ${ICHI_FAN_SHIFT:-1}
      ICHI_FAN_GAIN: ${ICHI_FAN_GAIN:-1.001}
      ICHI_REQUIRE_DOPREDICT: ${ICHI_REQUIRE_DOPREDICT:-true}
      ICHI_USE_HA: ${ICHI_USE_HA:-true}
      ICHI_ENABLE_SHORT: ${ICHI_ENABLE_SHORT:-true}
    volumes:
      - ./:/workspace
      - ./freqtrade_user_data:/freqtrade/user_data
    working_dir: /freqtrade
    command:
      - bash
      - -lc
      - |-
        set -euo pipefail
        echo "Running backtest for pairs: ${PAIRS}"
        bash /workspace/scripts/run_backtest_pairs.sh

  # Live/dry-run signal bot with Telegram notifications (uses Telegram in config)
  freqai-signal-bot-gpu-l4:
    build:
      context: .
      dockerfile: docker/Dockerfile.freqtrade.gpu.x86
    container_name: freqai_signal_bot_gpu_l4
    gpus: all
    restart: unless-stopped
    shm_size: "2g"
    environment:
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
      PYTHONPATH: /workspace
      FREQAI_DEVICE: cuda
      MPLBACKEND: Agg
      PAIRS: ${PAIRS:-BTC/USDT:USDT}
      STRATEGY: ${STRATEGY:-FreqAIHybridExample}
      FREQAIMODEL: ${FREQAIMODEL:-HybridTimeseriesFreqAIModel_tinhn}
      TIMEFRAMES: ${TIMEFRAMES:-1h}
      TIMERANGE: ${TIMERANGE:-20240101-20240201}
      # Strategy tuning (ichiV1)
      ICHI_STD_MULT: ${ICHI_STD_MULT:-0.5}
      ICHI_BULLISH_LEVEL: ${ICHI_BULLISH_LEVEL:-2}
      ICHI_CLOUD_LEVEL: ${ICHI_CLOUD_LEVEL:-1}
      ICHI_FAN_SHIFT: ${ICHI_FAN_SHIFT:-1}
      ICHI_FAN_GAIN: ${ICHI_FAN_GAIN:-1.001}
      ICHI_REQUIRE_DOPREDICT: ${ICHI_REQUIRE_DOPREDICT:-true}
      ICHI_USE_HA: ${ICHI_USE_HA:-true}
      ICHI_ENABLE_SHORT: ${ICHI_ENABLE_SHORT:-true}
    volumes:
      - ./:/workspace
      - ./freqtrade_user_data:/freqtrade/user_data
    working_dir: /freqtrade
    command:
      - bash
      - -lc
      - |-
        set -euo pipefail
        echo "Starting signal bot for pairs: ${PAIRS}"
        bash /workspace/scripts/run_trade_pairs.sh

  # Freqtrade Web UI (FreqUI) to inspect results and interact with the bot
  freqtrade-webui:
    build:
      context: .
      dockerfile: docker/Dockerfile.freqtrade.gpu.x86
    container_name: freqtrade_webui
    gpus: all
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      PYTHONPATH: /workspace
      MPLBACKEND: Agg
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
      FREQAI_DEVICE: cuda
      TIMEFRAMES_WEBUI: ${TIMEFRAMES_WEBUI:-1h,5m}
      TIMERANGE: ${TIMERANGE:-20240101-20250930}
      BLOCKS: ${BLOCKS:-3}
      BLOCK_DAYS: ${BLOCK_DAYS:-30}
    volumes:
      - ./:/workspace
      - ./freqtrade_user_data:/freqtrade/user_data
      # Persist UI assets across restarts to avoid re-downloading
      - freqtrade_ui_data:/root/.local/share/freqtrade
    working_dir: /freqtrade
    command:
      - bash
      - -lc
      - |-
        set -euo pipefail
        echo "Ensuring historical OHLCV for WebUI...";
        bash /workspace/scripts/ensure_data_for_timeframes.sh \
          /freqtrade/user_data/config.json \
          "${TIMEFRAMES_WEBUI:-1h,5m}" \
          "${TIMERANGE:-20240101-20250930}" \
          "${BLOCKS:-3}" \
          "${BLOCK_DAYS:-30}";
        echo "Installing Freqtrade UI assets (if not present)...";
        freqtrade install-ui || true;
        exec freqtrade webserver --config /freqtrade/user_data/config.json

  # Optional: classification run example (commented). Enable by uncommenting.
  # crypto-train-gpu-l4-cls:
  #   build:
  #     context: .
  #     dockerfile: docker/Dockerfile.gpu.x86
  #   container_name: crypto_train_gpu_l4_cls
  #   gpus: all
  #   restart: unless-stopped
  #   shm_size: "2g"
  #   environment:
  #     NVIDIA_VISIBLE_DEVICES: all
  #     NVIDIA_DRIVER_CAPABILITIES: compute,utility
  #     TORCH_CUDA_ARCH_LIST: "8.9"
  #     MPLBACKEND: Agg
  #   volumes:
  #     - ./:/workspace
  #     - ./artifacts_cls:/workspace/artifacts
  #   working_dir: /workspace
  #   command: [
  #     "python", "hybrid_lstm_transformer_crypto.py",
  #     "--classification",
  #     "--epochs", "${EPOCHS:-10}",
  #     "--batch_size", "${BATCH_SIZE:-32}",
  #     "--window_size", "${WINDOW_SIZE:-60}",
  #     "--stride", "${STRIDE:-1}",
  #     "--source", "${SOURCE:-auto}",
  #     "--out_dir", "artifacts"
  #   ]

volumes:
  freqtrade_ui_data:
